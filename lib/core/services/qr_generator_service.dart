import 'package:flutter/material.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'dart:ui';
import 'dart:async';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:share_plus/share_plus.dart';

class QRGeneratorService {
  static Future<Uint8List> generateQRCodeData(
    String data, {
    int size = 200,
    Color? foregroundColor,
    Color? backgroundColor,
  }) async {
    final painter = QrPainter(
      data: data,
      version: QrVersions.auto,
      eyeStyle: QrEyeStyle(
        eyeShape: QrEyeShape.square,
        color: foregroundColor ?? Colors.black,
      ),
    );

    final picData = await painter.toImageData(
      size.toDouble(),
      format: ImageByteFormat.png,
    );
    return picData!.buffer.asUint8List();
  }

  static Future<String> saveQRCodeToGallery(Uint8List bytes) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File(
        '${directory.path}/qrcode_${DateTime.now().millisecondsSinceEpoch}.png',
      );
      await file.writeAsBytes(bytes);
      return file.path;
    } catch (e) {
      debugPrint('Save QR code error: $e');
      rethrow;
    }
  }

  static Future<void> shareQRCode(Uint8List bytes) async {
    try {
      final directory = await getTemporaryDirectory();
      final filePath = '${directory.path}/qr_code_share.png';
      final file = File(filePath);

      await file.writeAsBytes(bytes);

      // Use the basic share method instead of shareXFiles
      await Share.share(
        'QR Code generated by QR Master Scanner',
        subject: 'QR Code',
        sharePositionOrigin: Rect.fromLTWH(0, 0, 100, 100),
        // Optionally, you can attach the file path as text or use shareXFiles if you want to share the file itself.
      );
    } catch (e) {
      debugPrint('Share error: $e');
    }
  }

  // static Future<void> shareQRCode(Uint8List bytes) async {
  //   try {
  //     final directory = await getTemporaryDirectory();
  //     final file = File(
  //       '${directory.path}/qrcode_${DateTime.now().millisecondsSinceEpoch}.png',
  //     );
  //     await file.writeAsBytes(bytes);

  //     // ignore: deprecated_member_use
  //     await Share.shareXFiles([
  //       XFile(file.path),
  //     ], text: 'Check out this QR code!');
  //   } catch (e) {
  //     debugPrint('Share QR code error: $e');
  //     rethrow;
  //   }
  // }

  static String createWifiQRCode(
    String ssid,
    String password,
    String encryption,
  ) {
    return 'WIFI:T:$encryption;S:$ssid;P:$password;;';
  }

  static String createContactQRCode(Map<String, String> contactInfo) {
    final vcard = StringBuffer();
    vcard.writeln('BEGIN:VCARD');
    vcard.writeln('VERSION:3.0');
    if (contactInfo['firstName'] != null && contactInfo['lastName'] != null) {
      vcard.writeln(
        'N:${contactInfo['lastName']};${contactInfo['firstName']};;;',
      );
      vcard.writeln(
        'FN:${contactInfo['firstName']} ${contactInfo['lastName']}',
      );
    }
    if (contactInfo['phone'] != null) {
      vcard.writeln('TEL:${contactInfo['phone']}');
    }
    if (contactInfo['email'] != null) {
      vcard.writeln('EMAIL:${contactInfo['email']}');
    }
    if (contactInfo['website'] != null) {
      vcard.writeln('URL:${contactInfo['website']}');
    }
    if (contactInfo['address'] != null) {
      vcard.writeln('ADR:;;${contactInfo['address']};;;');
    }
    vcard.writeln('END:VCARD');
    return vcard.toString();
  }

  static String createEventQRCode(Map<String, String> eventInfo) {
    final vevent = StringBuffer();
    vevent.writeln('BEGIN:VEVENT');
    vevent.writeln('SUMMARY:${eventInfo['title']}');
    if (eventInfo['location'] != null) {
      vevent.writeln('LOCATION:${eventInfo['location']}');
    }
    if (eventInfo['startTime'] != null) {
      vevent.writeln('DTSTART:${eventInfo['startTime']}');
    }
    if (eventInfo['endTime'] != null) {
      vevent.writeln('DTEND:${eventInfo['endTime']}');
    }
    if (eventInfo['description'] != null) {
      vevent.writeln('DESCRIPTION:${eventInfo['description']}');
    }
    vevent.writeln('END:VEVENT');
    return vevent.toString();
  }
}
